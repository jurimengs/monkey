<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.memory.mapper.BusinessAsyncTaskMapper">
    
    <resultMap type="com.memory.entity.BusinessAsyncTask" id="BusinessAsyncTaskResult">
        <result property="id"    column="id"    />
        <result property="taskName"    column="task_name"    />
        <result property="status"    column="status"    />
        <result property="deleted"    column="deleted"    />
        <result property="creator"    column="creator"    />
        <result property="updater"    column="updater"    />
        <result property="tenantId"    column="tenant_id"    />
    </resultMap>

    <sql id="selectBusinessAsyncTaskVo">
        select id, task_name, remark, status, deleted, creator, updater, create_time, update_time, tenant_id from business_async_task
    </sql>

    <select id="selectBusinessAsyncTaskList" parameterType="com.memory.entity.BusinessAsyncTask" resultMap="BusinessAsyncTaskResult">
        <include refid="selectBusinessAsyncTaskVo"/>
        <where>  
            <if test="taskName != null  and taskName != ''"> and task_name like concat('%', #{taskName}, '%')</if>
            <if test="deleted != null "> and deleted = #{deleted}</if>
            <if test="creator != null "> and creator = #{creator}</if>
            <if test="updater != null "> and updater = #{updater}</if>
            <if test="tenantId != null "> and tenant_id = #{tenantId}</if>
        </where>
    </select>
    
    <select id="selectBusinessAsyncTaskById" parameterType="Long" resultMap="BusinessAsyncTaskResult">
        <include refid="selectBusinessAsyncTaskVo"/>
        where id = #{id}
    </select>
        
    <insert id="insert" parameterType="com.memory.entity.BusinessAsyncTask" useGeneratedKeys="true" keyProperty="id">
        insert into business_async_task
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="taskName != null and taskName != ''">task_name,</if>
            <if test="remark != null and remark != ''">remark,</if>
            <if test="status != null">status,</if>
            <if test="deleted != null">deleted,</if>
            <if test="creator != null">creator,</if>
            <if test="updater != null">updater,</if>
            <if test="createTime != null">create_time,</if>
            <if test="updateTime != null">update_time,</if>
            <if test="tenantId != null">tenant_id,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="taskName != null and taskName != ''">#{taskName},</if>
            <if test="remark != null and remark != ''">#{remark},</if>
            <if test="status != null">#{status},</if>
            <if test="deleted != null">#{deleted},</if>
            <if test="creator != null">#{creator},</if>
            <if test="updater != null">#{updater},</if>
            <if test="createTime != null">#{createTime},</if>
            <if test="updateTime != null">#{updateTime},</if>
            <if test="tenantId != null">#{tenantId},</if>
         </trim>
    </insert>

    <update id="update" parameterType="com.memory.entity.BusinessAsyncTask">
        update business_async_task
        <trim prefix="SET" suffixOverrides=",">
            <if test="taskName != null and taskName != ''">task_name = #{taskName},</if>
            <if test="remark != null and remark != ''">remark = #{remark},</if>
            <if test="status != null">status = #{status},</if>
            <if test="deleted != null">deleted = #{deleted},</if>
            <if test="creator != null">creator = #{creator},</if>
            <if test="updater != null">updater = #{updater},</if>
            <if test="createTime != null">create_time = #{createTime},</if>
            <if test="updateTime != null">update_time = #{updateTime},</if>
            <if test="tenantId != null">tenant_id = #{tenantId},</if>
        </trim>
        where id = #{id}
    </update>

    <delete id="deleteBusinessAsyncTaskById" parameterType="Long">
        delete from business_async_task where id = #{id}
    </delete>

    <delete id="deleteBusinessAsyncTaskByIds" parameterType="java.lang.String">
        delete from business_async_task where id in 
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>
    
</mapper>