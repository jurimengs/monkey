<?xml version="1.0" encoding="UTF-8" ?>
<sqlMap namespace="Blacklist">

	<sql id="inBlacklist" >
		<![CDATA[
			INSERT INTO `t_blacklist` (
				`id`,
				`uid`,
				`user_name`,
				`id_type`,
				`pnid`,
				`status`,
				`increase_mode`,
				`company_id`,
				`type`,
				`term`,
				`remark`,
				`update_date`,
				`create_date`,
				`create_uid`,
				`update_uid`,
				`invalid_date` 
				)
				VALUES
					<#if list?? && list?size gt 0>
                    <#list list as field>
                        (
                        '${field.id}',
                        <#if field.uid??>
						  	'${field.uid}',
						<#else>
                        	null,
						</#if>
                        '${field.userName}',
                        ${field.idType},
                        '${field.pnId}',
                        ${field.status},
                        ${field.increaseMode},
                        '${field.companyId}',
                        ${field.type},
                        ${field.term},
                        '${field.remark}',
                        '${(field.updateDate)?string("yyyy-MM-dd HH:mm:ss")}',
                        '${(field.createDate)?string("yyyy-MM-dd HH:mm:ss")}',
                        '${field.createUserId}',
                        '${field.updateUserId}',
                        '${(field.invalidDate)?string("yyyy-MM-dd HH:mm:ss")}'
                        )
                    <#if field_has_next>,</#if>
                    </#list>
                </#if>
		]]>
	</sql>

	<sql id="inBlacklistExtInfo" >
		<![CDATA[
			INSERT INTO t_ext_t_blacklist(id,company_id,
            	<#list selfList as selfField>
            		${selfField.field}
            	<#if selfField_has_next> , </#if>
            	</#list>
            )
                VALUES (
                :blackListId,:companyId,
                <#list selfList as selfField>
            		'${selfField.value}'
            	<#if selfField_has_next> , </#if>
            	</#list>
                ) 
		]]>
	</sql>
	
	<sql id="updateBlacklistExtInfo" >
		<![CDATA[
		UPDATE t_ext_t_blacklist
		SET
		<#list selfList as selfField>
           	${selfField.field} = '${selfField.value}'
           	<#if selfField_has_next> , </#if>
        </#list>         
		WHERE id = :blackListId and  company_id = :companyId
			]]>
	</sql>
	
	<sql id="queryExtById">
		<![CDATA[
           select count(1)  from t_ext_t_blacklist where id=:blackListId
        ]]>
	</sql>
	
	<sql id="getBlackListById" isRead="true">
		<![CDATA[
			SELECT 
				t_blacklist.id,
				t_blacklist.uid,
				u.organ_id organId,
				u.gangwei_id gangweiId,
				t_blacklist.id_type idType,
				t_blacklist.pnid,
				u.emp_no empNo,
				t_blacklist.type,
				t_blacklist.term,
				t_blacklist.remark,
				o.organ_name organName,
				g.gangwei_name gangweiName,
				t_blacklist.user_name userName,
				t_blacklist.create_date createDate,
				t_blacklist.update_date updateDate,
				t_blacklist.update_uid updateUid,
				uu.user_name updateUserName,
				t_blacklist.`status`,
				t_blacklist.invalid_date invalidDateDefault,
				<#if fields?? && fields?size gt 0>
					<#list fields as field>
							${field} ,
					</#list>
				</#if> 
				t_blacklist.increase_mode increaseMode
			FROM
				t_blacklist
			LEFT JOIN wec_user u ON t_blacklist.uid = u.id
			LEFT JOIN t_organ o ON u.organ_id = o.id
			LEFT JOIN t_gangwei g ON u.gangwei_id = g.id
			LEFT JOIN wec_user uu ON t_blacklist.update_uid = uu.id
			LEFT JOIN t_ext_t_blacklist on t_ext_t_blacklist.id = t_blacklist.id
			WHERE
				t_blacklist.id = :id
		]]>
	</sql>

	<sql id="getBlackListByLizhiId" isRead="true">
		<![CDATA[
			SELECT
				t_blacklist.id,
				t_blacklist.uid,
				t_blacklist.id_type idType,
				t_blacklist.pnid,
				t_blacklist.type,
				t_blacklist.term,
				t_blacklist.remark,
				t_blacklist.user_name userName,
				t_blacklist.create_date createDate,
				t_blacklist.update_date updateDate,
				t_blacklist.update_uid updateUid,
				t_blacklist.`status`,
				t_blacklist.invalid_date invalidDateDefault,
				t_blacklist.increase_mode increaseMode
			FROM
				t_blacklist
			WHERE
				t_blacklist.lizhi_id = :lizhiId
		]]>
	</sql>

	<sql id="getBlacklistByUserPnid" isRead="true">
		<![CDATA[
			SELECT 
				p.id,
				p.uid,
				u.organ_id organId,
				u.gangwei_id gangweiId,
				p.id_type idType,
				p.pnid,
				u.emp_no empNo,
				p.type,
				p.term,
				p.remark,
				o.organ_name organName,
				g.gangwei_name gangweiName,
				p.user_name userName,
				p.create_date createDate,
				p.update_date updateDate,
				p.update_uid updateUid,
				uu.user_name updateUserName,
				p.`status`,
				p.invalid_date invalidDateDefault
			FROM
				t_blacklist p
			LEFT JOIN wec_user u ON p.uid = u.id
			LEFT JOIN t_organ o ON u.organ_id = o.id
			LEFT JOIN t_gangwei g ON u.gangwei_id = g.id
			LEFT JOIN wec_user uu ON p.update_uid = uu.id
			WHERE
				p.id_type = :idType
			AND p.pnid = :pnid
			AND p.`status` = 0
			AND p.company_id = :companyId
			AND p.invalid_date > :date
			LIMIT 1
		]]>
	</sql>
	
	
	<sql id="getCountOtherPerson" isRead="true">
		<![CDATA[
			SELECT 
				count(1)
			FROM
				t_blacklist p
			WHERE
				uid is null
			AND (`status` = 1 OR `status` = 0)
			AND company_id = :companyId
			<#if key??  && key?length gt 0>
			AND p.user_name LIKE CONCAT('%', :key, '%')
			</#if>
		]]>
	</sql>
	
	
	<sql id="getBlacklistOtherPerson" isRead="true">
		<![CDATA[
			SELECT 
				p.id,
				p.uid,
				p.id_type idType,
				p.pnid,
				p.type,
				p.term,
				p.remark,
				p.user_name userName,
				p.create_date createDate,
				p.`status`,
				p.update_date updateDate,
				p.update_uid updateUid,
				uu.user_name updateUserName,
				p.invalid_date invalidDate,
				p.increase_mode increaseMode
			FROM
				t_blacklist p
			LEFT JOIN wec_user uu ON p.update_uid = uu.id
			WHERE
				p.uid is null
			AND	(p.`status` = 1 OR p.`status` = 0)
			AND p.company_id = :companyId
			<#if key??  && key?length gt 0>
			AND p.user_name LIKE CONCAT('%', :key, '%')
			</#if>
		]]>
	</sql>
	
	<sql id="checkBlacklistByPnid" isRead="true">
		<![CDATA[
			SELECT 
				count(1)
			FROM
				t_blacklist
			WHERE
				id_type = :idType
			AND pnid = :pnid
			AND status = 0
			AND invalid_date > :date
			AND company_id = :companyId
		]]>
	</sql>
	
	<sql id="getBlacklistPage" isRead="true">
		<![CDATA[
		SELECT
			p.id,
			p.uid,
			u.organ_id organId,
			u.gangwei_id gangweiId,
			p.id_type idType,
			p.pnid,
			u.emp_no empNo,
			p.type,
			p.term,
			p.remark,
			o.id organId,
			o.organ_name organName,
			g.gangwei_name gangweiName,
			p.user_name userName,
			p.create_date createDate,
			p.update_date updateDate,
			p.update_uid updateUid,
			uu.user_name updateUserName,
			p.`status`,
			p.invalid_date invalidDate
			<#if selfFields??  && selfFields?size gt 0>
					,
		           	<#list selfFields as selfField>
		          		 	ext.${selfField}
		          		 	<#if selfField_has_next>,</#if>
		       		</#list>
	       	</#if>
		FROM
			t_blacklist p
			LEFT JOIN wec_user u ON p.uid = u.id
			LEFT JOIN t_organ o ON u.organ_id = o.id
			LEFT JOIN t_gangwei g ON u.gangwei_id = g.id
			LEFT JOIN wec_user uu ON p.update_uid = uu.id
			LEFT JOIN t_ext_t_blacklist ext ON ext.id = p.id
		WHERE
			p.company_id = :companyId
		AND (p.`status` = 1 OR p.`status` = 0)
		AND o.organ_paths LIKE CONCAT(:organPaths,'%')
		<#if keyword??  && keyword?length gt 0>
				AND	(p.user_name LIKE CONCAT('%', :keyword, '%')
				OR g.gangwei_name LIKE CONCAT('%', :keyword, '%')
				OR o.organ_name LIKE CONCAT('%', :keyword, '%'))
		</#if>
		
		<#if dataRange??  && dataRange?length gt 0>
        	${dataRange}
        </#if>
		
  		<#switch condition>
	        <#case 1>
	             AND p.increase_mode = 10
	             <#break>
	        <#case 2>
	             AND p.increase_mode = 20
	             <#break>
	        <#case 3>
	             AND p.create_date > :date
	             <#break>
             <#case 4>
	             AND p.invalid_date < :date
				 AND p.invalid_date > :now
	             <#break>
	        <#default>
	             AND 1=1
   		</#switch>
		
		<#if functions??  && functions?size gt 0>
				and (
	           	<#list functions as thisfunc>
	           		<#if thisfunc??  && thisfunc?size gt 0>
	           		 	(
	           		 	<#list thisfunc as selffunc>
	           		 			${selffunc.sqlStr}  
	           		 			 	<#if selffunc.funcType??  && selffunc.funcType?length gt 0> 
	           		 			 		<#if selffunc.funcType = 0>
	           		 			 			<
	           		 			 		</#if> 
	           		 			 		<#if selffunc.funcType = 1>
	           		 			 			=
	           		 			 		</#if> 
	           		 			 		<#if selffunc.funcType = 2>
	           		 			 			>
	           		 			 		</#if> 
	           		 			 	<#else>
	           		 			 	 like
									</#if>  
	           		 			'${selffunc.funcValue}'
	           		 		<#if selffunc_has_next> and</#if>
	           		 	</#list>	           		 		           	       
	          		 		)
	          		 		<#if thisfunc_has_next> or </#if>
	          		 	</#if>          		 	
	       		</#list>
	       		)
	    </#if>
      	ORDER BY p.update_date desc
		]]>
	</sql>
	<sql id="getCountBlacklist" isRead="true">
		<![CDATA[
			SELECT 
				count(1)
			FROM
				t_blacklist p
				LEFT JOIN wec_user u ON p.uid = u.id
				LEFT JOIN t_organ o ON u.organ_id = o.id
				LEFT JOIN t_gangwei g ON u.gangwei_id = g.id
				LEFT JOIN wec_user uu ON p.update_uid = uu.id
				LEFT JOIN t_ext_t_blacklist ebl ON ebl.id = p.id
			WHERE
				p.company_id = :companyId
			AND (p.`status` = 1 OR p.`status` = 0)
			AND o.organ_paths LIKE CONCAT(:path,'%')
			<#if key??  && key?length gt 0>
					AND	(p.user_name LIKE CONCAT('%', :key, '%')
					OR g.gangwei_name LIKE CONCAT('%', :key, '%')
					OR o.organ_name LIKE CONCAT('%', :key, '%'))
			</#if>
			
	  		<#switch condition>
		        <#case 1>
		             AND p.increase_mode = 10
		             <#break>
		        <#case 2>
		             AND p.increase_mode = 20
		             <#break>
		        <#case 3>
		             AND p.create_date > :date
		             <#break>
	             <#case 4>
		             AND p.invalid_date < :date
					 AND p.invalid_date > :now
		             <#break>
		        <#default>
		             AND 1=1
	   		</#switch>
			
			<#if functions??  && functions?size gt 0>
				and (
	           	<#list functions as thisfunc>
	           		<#if thisfunc??  && thisfunc?size gt 0>
	           		 	(
	           		 	<#list thisfunc as selffunc>
	           		 			${selffunc.sqlStr}  
	           		 			 	<#if selffunc.funcType??  && selffunc.funcType?length gt 0> 
	           		 			 		<#if selffunc.funcType = 0>
	           		 			 			<
	           		 			 		</#if> 
	           		 			 		<#if selffunc.funcType = 1>
	           		 			 			=
	           		 			 		</#if> 
	           		 			 		<#if selffunc.funcType = 2>
	           		 			 			>
	           		 			 		</#if> 
	           		 			 	<#else>
	           		 			 	 like
									</#if>  
	           		 			'${selffunc.funcValue}'
	           		 		<#if selffunc_has_next> and</#if>
	           		 	</#list>	           		 		           	       
	          		 		)
	          		 		<#if thisfunc_has_next> or </#if>
	          		 	</#if>          		 	
	       		</#list>
	       		)
	      	</#if>
		]]>
	</sql>
	
	<sql id="getBlacklistPageH5" isRead="true">
		<![CDATA[
		SELECT
			p.id,
			p.uid,
			u.organ_id organId,
			u.gangwei_id gangweiId,
			p.id_type idType,
			p.pnid,
			u.emp_no empNo,
			p.type,
			p.term,
			p.remark,
			o.organ_name organName,
			g.gangwei_name gangweiName,
			p.user_name userName,
			p.create_date createDate,
			p.update_date updateDate,
			p.update_uid updateUid,
			p.`status`,
			p.invalid_date invalidDateDefault
		FROM
			t_blacklist p
			LEFT JOIN wec_user u ON p.uid = u.id
			LEFT JOIN t_organ o ON u.organ_id = o.id
			LEFT JOIN t_gangwei g ON u.gangwei_id = g.id
		WHERE
			p.company_id = :companyId
		AND (p.`status` = 1 OR p.`status` = 0)
		<#if path?? && path?length gt 0>
			AND o.organ_paths LIKE CONCAT(:path,'%')
		</#if>
		<#if keyName?? && keyName?length gt 0>
				AND	p.user_name LIKE CONCAT('%', :keyName, '%')
		</#if>
		<#if joinDate?? && joinDate?length gt 0>
			AND DATE_FORMAT(p.create_date,'%Y-%m-%d') = :joinDate
		</#if>
  		<#switch condition>
	        <#case 1>
	             AND p.increase_mode = 10
	             <#break>
	        <#case 2>
	             AND p.increase_mode = 20
	             <#break>
	        <#default>
	             AND 1=1
   		</#switch>
   		<#switch joinStyle>
	        <#case 0>
	             AND p.uid IS NOT NULL
	             <#break>
	        <#case 1>
	             AND p.uid IS NULL
	             <#break>
	        <#default>
	             AND 1=1
   		</#switch>
   		<#switch status>
	        <#case 0>
	             AND p.status = 0 AND p.invalid_date > NOW()
	             <#break>
	        <#case 1>
	             AND (
		             	p.status = 1 
		             	OR 
	             		(p.status = 0 AND p.invalid_date < NOW())
	             	)
	             <#break>
	        <#default>
	             AND 1=1
   		</#switch>
      	ORDER BY p.create_date DESC
		]]>
	</sql>
	
	<sql id="deleteByLizhiId">
		<![CDATA[
			DELETE FROM t_blacklist WHERE lizhi_id = :lizhiId
		]]>
	</sql>
	
    <sql id="updateStatusNormalWhenLizhiEffected">
        <![CDATA[
        UPDATE t_blacklist SET status = 0 WHERE lizhi_id = :lizhiId
        ]]>
    </sql>
	
</sqlMap>
