内存数据库

设计思想：
数据结构：数组+链表存储， 对象数据以 hashMap 形式存储在 Node上

每次对数据的操作被定义为事件，CRUD 都会触发监听事件， 事件触发后被封装成 Event对象存储到一个队列上， 同一个数据对象的相同类型的多次事件， 只会被记录一次。
Event 的成员变量，包括存储对象的引用（Store），事件类型的引用（EventType）， 主键字段名，及主键字段值，

当处理事件的时候，会通过 Event 中持有的主键字段值， 去引用的 Store 中检索要持久化的数据（hashmap）， 再做持久化操作

内存数据安全性问题：
可集群部署，集群间同步通过  netty， 一点对多点进行推送， 每个节点接受到数据，都应该第一时间向其他节点同步（同步策略用异步还是同步？）
数据同步采用分片式处理思想， 每个条持久成功的数据，都将被标记（或清除？）。数据的处理状态也需要向其他节点广播， 以防单节点挂掉，状态丢失


当前问题：
1. 持久化的数据对象， 是 cacheCopy吗？ 不仅仅是 cacheCopy， 还有所有的 HashStore中的数据，这些数据才是最核心的
2. 节点间数据同步策略，用异步还是同步？ 
3. 被持久化成功的数据，是要标记，还是要清除？ 清除不影响， 因为清除的只是事件，对原始业务数据并没有操作
4. cacheCopy 应该有一个 master 来管理， 
5. 新增与更新这两种事件如果在一起的话，可以合并掉